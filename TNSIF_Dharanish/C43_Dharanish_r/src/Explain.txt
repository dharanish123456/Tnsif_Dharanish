3 Key words are non access modifier(immutable).
. Static 
. Abstract
. Final

POLYMORPHISM :
	* having many forms.
	* allows us to perform a single action in different ways.
	* to define one interface and have multiple implementations.

Types of Java Polymorphism:
	i. Compile-time Polymorphism - static polymorphism, achieved by function overloading
	   or operator overloading.(same name but different parameters)
	   Note: But Java doesn’t support the Operator Overloading. 
	ii.Runtime Polymorphism - Dynamic Method, where multiple functions can have the same name 
	   but with different parameter lists, process in which a function call to the overridden
	   method is resolved at Runtime. 
	   
INTERFACE :
	* an abstract type used to specify the behavior of a class.
	* An interface in Java is a blueprint of a behavior.
	*
Syntax for Java Interfaces
	interface {
	    // declare constant fields
	    // declare methods that abstract 
	    // by default.   
	}

WRAPPER CLASS :
	* provide a way to use primitive data type as object.
	primitive|	wrapper
	--------------------
	boolean	 |	Boolean
	byte	 |	Byte
	char 	 |  Character
	float	 |	Float
	int 	 |	Integer
	long	 |	Long
	short	 |	Short
	double	 |	Double

EXCEPTION :
	* occurs during execution
	* example, hard disk crash, divide by zero etc,.
	* The exception class & subclass are a form of throwables

TYPES OF EXCEPTION :
	1. checked - compile time exception. because, error are checked while compile time 
	2. unchecked - compiler will not check these exception at compile time

					Object
					   ^
	                   |
					throwable
					   ^
					   |
		----------------------------------------
		^                                      ^
		|									   |
	exception                               Errors
	^   ^                                       ^
	|	|										|
	|	------------->						stackoverflow
	checked        unchecked				virtualMachine
	^               ^						outofmemory	
	|				|						
	IO  			Arithmetic						
	SQL				Nullpoint				
	ClassNotFound	indexoutofbounds
						^
						|
						ArrayIndexOutofBound
						StringIndexOutofBound
	
ERROR :
	* Errors are usually beyond the control of programmer and we should not try to handle error
	* error indicate problem in program
	
KEYWORDS FOR HANDLING EXCEPTION :
	# try
	# catch
	# throws
	# throw
	
SYNTAX :
	try{
		//code, Statement
	}
	catch(){    // inside catch if we don't know what error it is use "Exception e"
		//code, Statement
	}	
	finally{
	
	}
	
THROW :
	* used to throw an build-in exception or custom exception explicity or manually
	* we can throw either an checked or unchecked exception
	
THROWS :
	* used in method declaration
	* it is followed by exception class name. with throws clause, we can declare more than one 
	  exception.
	
SYNTAX :
	access_specifier_return_type_method_name(parameter list)throws exception{
		//body of the method
	}	
 
DIFF BW THROW & THROWS ?
------------------------------------------------------------------------------------------------
 					Throw					|					Throws
------------------------------------------------------------------------------------------------
  #	 A throw is used to throw an excepcion 	|	#  A throws to declare one or more exceptions,
	 explictly								|	   separated by commas.
  #  Can throw a single exception using 	|	#  Multiple can be thrown using Throws
     throw									|
  #  This keyword is used in the method		|	#  Signaturs method is used with keyword throws
  #  Only unchecked exceptions propagated 	|	#  To raise an exception throws keyword followed
     using throw keyword.					|      by the class name and checked exception can be 
     										|	   propagated
  #  Throw keyword is followed by the       |   #  Throws keyword is followed by the exception 
  	 an instance of Throwable class or one 	|      class
  	 of its sub-classes.					|
------------------------------------------------------------------------------------------------
  
THREADS :
	* A single independent path of execution of a group of statements.  
 
THREAD LIFE CYCLE :
	* A thread in Java at any point of time exists in any one of the following states. A thread 
	  lies only in one of the shown states at any instant:
		New State - when a thread is newly created.
		Runnable State - a thread is ready for execution.
		Running State - processor allocated time slot to thread for it's execution.
		Blocked State - when thread is blocked state when it is suspended, sleeping, waiting for 
			for some time in order to satisfy some condition.
		Dead State - A thread dies or moves into dead state automatically when it run method 
			execution of statements.that is thred terminated or dead , when a thread comes out of
			run() method.
		Waiting State
		Timed Waiting State
		Terminated State	
	
THREAD METHODS :
	# start - initiate execution.
	# sleep - sleep for specified time and execute.
	# join - wait for thread die.
	# wait - current thread wait until anothor thread invokes notify() method. 
	# notify - Wakes up a single thread that is waiting on the object's monitor.
	# notifyAll - Wakes up all threads that are waiting on the object's monitor.
	
SYNCHRONIZATION :
	* The process of program under execution.
	* it runs independently isolated from another process	
	
TYPES :
	# Process Synchronization
	# Thread Synchronization
	
RUNNABLE :
	It is an interface which can be use implement in class.
	
HIERARCHY :
 								Iterable(I)						(I)-Interface
 									^							(C)-class
									|	
								Collection(I)
									^
									|
	----------------------------------------------------------------------------
	|								|						        			|
 List(I)						  Queue(I)									 Set(I)
	^							   ^     |									  |  ^
	|__ArrayList(C)				   |   PriorityQueue(C)				  Hashset(C) |
	|							   |										  |	 |
	|_LinkedList(C)-------   	   Deque(I)						LinkedHashSet(C) |
	|					 |			^											 |
	|_Vector(C)          |----------|								    Sortedset(I)
		  ^							|											 ^
		  |							|											 |
		Stack(C)				Arraydeque(C)							  TreeSet(C)
	
	
ARRAY LIST :
	* Not thread safe
	* Asynchronous manner
	* Update & Recovery is difficult inerstion & Deletion easily

LINKED LIST :
	* Thread safe
	* Synchronous manner
	* Easy for insertion & Deletion
	* Search & recovery is difficult
	
STACK :
	* Linear data structure
	* used to show task
	
VECTOR :
	* same as arrayList
	* Size is double of arrayList
	
MAP :
	* Key & Value pads
	* Key can't be duplicated
	* Key value is a pair
	
-----------------------------------------------------------------------------------------------
| 	INTERFACES	   |		DESCRIPTION														  |
-----------------------------------------------------------------------------------------------
| Collection	   | A basic interface that defines operation that all classes that maintain  |
|				   | collections of object typically implement								  |
-----------------------------------------------------------------------------------------------
| Set     		   | Extends collection interface for sets that maintain unique element		  |
-----------------------------------------------------------------------------------------------
| SortedSet   	   | Augments set interface or sets that maintain their elements in sorted	  |
|				   | Order																	  |
-----------------------------------------------------------------------------------------------
|List			   | Collection that requires position-oriented operations should be created  |
|                  | as lists. Duplicates are allowed.										  |
-----------------------------------------------------------------------------------------------
|Queue			   | Things arranged by order in which they are to be processed				  |
-----------------------------------------------------------------------------------------------
|Map			   | basic interface that defines operations that classes that represent 	  |
|                  | mapping of keys to values typically implement							  |
-----------------------------------------------------------------------------------------------
|SortedMap		   | Extends map interface for maps that maintain their mapping in key order  |
----------------------------------------------------------------------------------------------- 
	
	
	
	
	
	
	
	
	
	